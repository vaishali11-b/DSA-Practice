problem link - https://leetcode.com/problems/longest-common-subsequence/



memoization - 
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] mat = new int[n+1][m+1];
        for(int i=0 ; i<=n ;i++){
            for(int j=0;j<=m ;j++){
                mat[i][j]= -1;
            }
        }
        return findLCS(text1 , text2 , n , m , mat);
    }

    public int findLCS(String text1 ,String text2 ,int n ,int m , int[][] mat ){
        //if length becomes zero for any of the string return 0
        if(n==0 || m==0){
            return 0;
        }
        if(mat[n][m] != -1){
            return mat[n][m];
        }else{
        //if the char at (n-1) and (m-1) matches inc the lcs count 
        if(text1.charAt(n-1) == text2.charAt(m-1)){
            return mat[n][m] = 1+ findLCS(text1 , text2 , n-1 , m-1, mat);
        }else{
            //else remove n-1 , m and n , m-1 
            return mat[n][m]= Math.max(findLCS(text1 , text2 , n-1 , m, mat),findLCS(text1 , text2 , n , m-1, mat));
        }
        }
        //return mat[n][m];

    }
}

#bottom-up (Tabulation approach)

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] mat = new int[n+1][m+1];
        for(int i=0 ; i<=n ;i++){
            for(int j=0;j<=m ;j++){
                if(i==0 || j==0){
                    mat[i][j]= 0;
                }
            }
        }
         for(int i=1 ; i<=n ;i++){
            for(int j=1;j<=m ;j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                     mat[i][j] = 1+ mat[i-1][j-1];
            }else{
            //else remove n-1 , m and n , m-1 
                   mat[i][j]= Math.max(mat[i][j-1],mat[i-1][j]);
        }
        }
    }
    return mat[n][m];

}
}
