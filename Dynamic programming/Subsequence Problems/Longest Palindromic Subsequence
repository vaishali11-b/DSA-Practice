#https://www.geeksforgeeks.org/problems/longest-palindromic-subsequence-1612327878/1
# Bottom-up approach time complexity O(n^2)

// User function Template for Java

class Solution {
    public int longestPalinSubseq(String s) {
        // code here
        String rs = new StringBuilder(s).reverse().toString();
        int ans = findLps(s, rs);
        return ans;
    }
    public int findLps(String s , String rs){
        int n = s.length();
        int m= rs.length();
        
        int[][] mat = new int[n+1][m+1];
        
        for(int i=0 ; i<=n ; i++){
            for(int j=0 ; j<=m ; j++){
                if(i==0 || j==0){
                    mat[i][j] = 0;      
                    }
            }
        }
        
         for(int i=1; i<=n ; i++){
            for(int j=1; j<=m ; j++){
                if(s.charAt(i-1) == rs.charAt(j-1)){
                    mat[i][j] = 1 + mat[i-1][j-1];
            }else{
                mat[i][j] = Math.max( mat[i-1][j] , mat[i][j-1] ) ;
            }
        }

    }
    return mat[n][m];
    }
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
