# https://www.geeksforgeeks.org/problems/check-for-subsequence4930/1

Recursive Approach 
// User function Template for Java
//we are matching the characters recursively and if we reach to m==0 , that means we have found subsequnce 
//of A in B , we recursively check the character starting from last character if matches we dec index in both 
//else we dec index in string b.
class Solution {
    boolean isSubSequence(String A, String B) {
         return  isSubSequence(A,B,A.length(), B.length());
        
    }
     static boolean isSubSequence(String s1, String s2,
                                 int m, int n)
    {
        // Base Cases
        if (m == 0)
            return true;
        if (n == 0)
            return false;

        // If last characters of two strings are matching
        if (s1.charAt(m - 1) == s2.charAt(n - 1))
            return isSubSequence(s1, s2, m - 1, n - 1);

        // If last characters are not matching
        return isSubSequence(s1, s2, m, n - 1);
    }
}

//time complexity = O(n)
//space O(n)

Iterative Approach
class Solution {
    boolean isSubSequence(String A, String B) {
        int i= A.length();
        int j= B.length();
        
        while(i>0 || j>0){
            if(i==0){
                return true;
            }
            if(j==0){
                return false;
            }
            if(A.charAt(i-1) == B.charAt(j-1)){
                i--;
                j--;
            }else{
                j--;
            }
        }
        return true;
    }
}
//time complexity - O(n)
