//1 Knapsack with memoization



class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int n = val.length;
        int[][] mat = new int[n+1][W+1];
        for(int i=0 ; i<=n ; i++){
            for(int j=0 ; j<=W ; j++){
                mat[i][j] = -1;
            }
        }
        return solveKS(W , val , wt , n , mat);
    }
    
    public static int solveKS(int W ,int val[], int wt[] , int n ,int[][] mat){
        if(n==0 || W == 0){
            return 0;
        }
        if(mat[n][W] != -1){
            return mat[n][W];
        }
        
        if(wt[n-1] <= W){
             mat[n][W] = Math.max(val[n-1]+ solveKS(W-wt[n-1], val , wt , n-1 , mat),solveKS(W , val , wt , n-1 , mat));
            
        }else{
             mat[n][W] = solveKS(W , val , wt , n-1 , mat);
        }
        
        return mat[n][W];
    }
}
