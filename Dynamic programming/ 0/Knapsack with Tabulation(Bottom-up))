class Solution {
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int n = val.length;
        int[][] mat = new int[n+1][W+1];
        return solveKS(W , val , wt , n , mat);
    }
    
    public static int solveKS(int W ,int val[], int wt[] , int n ,int[][] mat){
       //initialize first row and col as 0
        for(int i=0 ; i<=n ; i++){
            for(int j=0 ; j<=W ; j++){
                if(i==0 || j==0)
                    mat[i][j] = 0;
            }
        }
  //building from bottom to top
        for(int i=1 ; i<=n ; i++){
            for(int j=1 ; j<=W ; j++){
                if(wt[i-1] <= j){
                    mat[i][j] = Math.max(val[i-1]+ mat[i-1][j-wt[i-1]],mat[i-1][j]);
            
                }else{
                     mat[i][j] = mat[i-1][j];
                 }
            }
        }
        
        return mat[n][W];
    }
}
