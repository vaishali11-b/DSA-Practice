###1061. Lexicographically Smallest Equivalent String

class Solution {
    public String smallestEquivalentString(String s1, String s2, String baseStr) {
        //graph - for adjacendy mapping 
        Map<Character , List<Character>> graph = new HashMap<>();

        for(int i=0 ; i < s1.length() ; i++){
            char ch1 = s1.charAt(i);
            char ch2 = s2.charAt(i);

            if(!graph.containsKey(ch1)){
                graph.put(ch1 , new ArrayList<>());
            }
            graph.get(ch1).add(ch2);

             if(!graph.containsKey(ch2)){
                graph.put(ch2 , new ArrayList<>());
            }
            graph.get(ch2).add(ch1);
        }
        //to store to the smallest char corresponding to any char in graph
        Map<Character , Character> maptoSmallest = new HashMap<>();
        //to maintain a visited set
        Set<Character> visited = new HashSet<>();
        for(char c='a' ; c <= 'z' ; c++){

            if(graph.containsKey(c) && !visited.contains(c)){
                //to store the values found adjacent to a character
                List<Character> group = new ArrayList<>();
                dfs(graph, group , visited , c);

                Collections.sort(group);

                char small = group.get(0);
                for(char ch : group){
                    maptoSmallest.put(ch,small);
                }
        }
    }
    StringBuilder ans = new StringBuilder();
    for(int i=0 ; i< baseStr.length() ; i++){
        char ch = baseStr.charAt(i);
        ans.append(maptoSmallest.getOrDefault(ch , ch));
    }
    return ans.toString();

    }
    void dfs( Map<Character , List<Character>> graph, List<Character> group,Set<Character> visited,char c ){
        visited.add(c);
        group.add(c);
        for(char adj : graph.getOrDefault(c , new ArrayList<>())){
            if(!visited.contains(adj)){
                dfs(graph, group , visited , adj);
            }
        }
    }
}
